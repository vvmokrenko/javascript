//1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.

const numSplit = {
    'единицы': '',
    'десятки': '',
    'сотни': ''
};

function numToObj(num) {
    if (num < 0 && num > 999) {
        console.log(`Значение не входит в допустимый диаапазон!`);
    } else {
        let tmp = Math.floor(num / 100);
        numSplit['единицы'] = num % 10;
        numSplit['десятки'] = Math.floor((num - tmp * 100) / 10);
        numSplit['сотни'] = tmp;
    };
    return numSplit;
};

let inputNum = +prompt('Введите число от 0 до 999: ');
console.log(`Введено число ${inputNum}. Результат:`);
console.log(numToObj(inputNum));



//2.Продолжить работу с интернет-магазином:
//2.1. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
//2.2. Реализуйте такие объекты.
//2.3. Перенести функционал подсчета корзины на объектно-ориентированную базу.
const basket = {
    total_price: 0,
    items: [
        ['item1', 50, 2.5],
        ['item2', 535, 0.75],
        ['item3', 12, 36],
        ['item4', 64, 12],
        ['item5', 87, 9.12]
    ],
    countBasketPrice: function () {
        for (const val of this.items) { this.total_price += val[1] * val[2] }
        return this.total_price;
    }
}
console.log(`Общая стоимость корзины: ${basket.countBasketPrice()}`);



//3.* Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.

//Видится следующая структура сущности  "КАТАЛОГ":
//Каталог
//    - Категория 1(напр.товары для мужчин)
//        - Подкатегория 1 (напр. Обувь)
//        - Подкатегория 2 (напр. Верхняя одежда)
//    - Категория 2(напр.товары для женщин)
//        - Подкатегория 1 (напр. Обувь)
//        - Подкатегория 2 (напр. Верхняя одежда)
//    - Категория 3(напр.товары для детей)
//        - Подкатегория 1 (напр. Обувь)
//        - Подкатегория 2 (напр. Верхняя одежда)
//  
// Товары из разных подкатегорий могут иметь одинаковую структуру, так как основные атрибуты одинаковы. 
// При этом в зависимости от выбора пункта меню в той или иной кактегории/подкатегории мы можем обеспечить вызов 
// разных методов или одинаковых методов с возможностью (switch) выбора определенных действий.
// Например, метод "Подобрать"может к основному товару предложить выбор опрделенных товаров,при этом ддя каждой категории/подкатегории
//будет работать свой алгоритм подбора, в зависимости от контекста.